// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/darwishdev/devkit-api-base/common/db/gen (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	connect "github.com/bufbuild/connect-go"
	gomock "github.com/golang/mock/gomock"
	db "github.com/darwishdev/devkit-api-base/common/db/gen"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AmenitiesInputList mocks base method.
func (m *MockStore) AmenitiesInputList(arg0 context.Context, arg1 db.AmenitiesInputListParams) ([]db.AmenitiesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenitiesInputList", arg0, arg1)
	ret0, _ := ret[0].([]db.AmenitiesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenitiesInputList indicates an expected call of AmenitiesInputList.
func (mr *MockStoreMockRecorder) AmenitiesInputList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenitiesInputList", reflect.TypeOf((*MockStore)(nil).AmenitiesInputList), arg0, arg1)
}

// AmenitiesList mocks base method.
func (m *MockStore) AmenitiesList(arg0 context.Context) ([]db.PropertiesSchemaAmenitiesView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenitiesList", arg0)
	ret0, _ := ret[0].([]db.PropertiesSchemaAmenitiesView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenitiesList indicates an expected call of AmenitiesList.
func (mr *MockStoreMockRecorder) AmenitiesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenitiesList", reflect.TypeOf((*MockStore)(nil).AmenitiesList), arg0)
}

// AmenityCreate mocks base method.
func (m *MockStore) AmenityCreate(arg0 context.Context, arg1 db.AmenityCreateParams) (db.PropertiesSchemaAmenity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenityCreate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaAmenity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenityCreate indicates an expected call of AmenityCreate.
func (mr *MockStoreMockRecorder) AmenityCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenityCreate", reflect.TypeOf((*MockStore)(nil).AmenityCreate), arg0, arg1)
}

// AmenityDeleteRestore mocks base method.
func (m *MockStore) AmenityDeleteRestore(arg0 context.Context, arg1 []int32) (db.PropertiesSchemaAmenity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenityDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaAmenity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenityDeleteRestore indicates an expected call of AmenityDeleteRestore.
func (mr *MockStoreMockRecorder) AmenityDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenityDeleteRestore", reflect.TypeOf((*MockStore)(nil).AmenityDeleteRestore), arg0, arg1)
}

// AmenityFind mocks base method.
func (m *MockStore) AmenityFind(arg0 context.Context, arg1 int32) (db.PropertiesSchemaAmenitiesView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenityFind", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaAmenitiesView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenityFind indicates an expected call of AmenityFind.
func (mr *MockStoreMockRecorder) AmenityFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenityFind", reflect.TypeOf((*MockStore)(nil).AmenityFind), arg0, arg1)
}

// AmenityFindForUpdate mocks base method.
func (m *MockStore) AmenityFindForUpdate(arg0 context.Context, arg1 int32) (db.AmenityFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenityFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.AmenityFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenityFindForUpdate indicates an expected call of AmenityFindForUpdate.
func (mr *MockStoreMockRecorder) AmenityFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenityFindForUpdate", reflect.TypeOf((*MockStore)(nil).AmenityFindForUpdate), arg0, arg1)
}

// AmenityGroupAmenitiesModify mocks base method.
func (m *MockStore) AmenityGroupAmenitiesModify(arg0 context.Context, arg1 db.AmenityGroupAmenitiesModifyParams) (db.PropertiesSchemaAmenityGroupsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenityGroupAmenitiesModify", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaAmenityGroupsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenityGroupAmenitiesModify indicates an expected call of AmenityGroupAmenitiesModify.
func (mr *MockStoreMockRecorder) AmenityGroupAmenitiesModify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenityGroupAmenitiesModify", reflect.TypeOf((*MockStore)(nil).AmenityGroupAmenitiesModify), arg0, arg1)
}

// AmenityGroupCreate mocks base method.
func (m *MockStore) AmenityGroupCreate(arg0 context.Context, arg1 db.AmenityGroupCreateParams) (db.PropertiesSchemaAmenityGroupsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenityGroupCreate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaAmenityGroupsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenityGroupCreate indicates an expected call of AmenityGroupCreate.
func (mr *MockStoreMockRecorder) AmenityGroupCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenityGroupCreate", reflect.TypeOf((*MockStore)(nil).AmenityGroupCreate), arg0, arg1)
}

// AmenityGroupDeleteRestore mocks base method.
func (m *MockStore) AmenityGroupDeleteRestore(arg0 context.Context, arg1 []int32) (db.PropertiesSchemaAmenityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenityGroupDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaAmenityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenityGroupDeleteRestore indicates an expected call of AmenityGroupDeleteRestore.
func (mr *MockStoreMockRecorder) AmenityGroupDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenityGroupDeleteRestore", reflect.TypeOf((*MockStore)(nil).AmenityGroupDeleteRestore), arg0, arg1)
}

// AmenityGroupFind mocks base method.
func (m *MockStore) AmenityGroupFind(arg0 context.Context, arg1 int32) (db.PropertiesSchemaAmenityGroupsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenityGroupFind", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaAmenityGroupsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenityGroupFind indicates an expected call of AmenityGroupFind.
func (mr *MockStoreMockRecorder) AmenityGroupFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenityGroupFind", reflect.TypeOf((*MockStore)(nil).AmenityGroupFind), arg0, arg1)
}

// AmenityGroupUpdate mocks base method.
func (m *MockStore) AmenityGroupUpdate(arg0 context.Context, arg1 db.AmenityGroupUpdateParams) (db.PropertiesSchemaAmenityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenityGroupUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaAmenityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenityGroupUpdate indicates an expected call of AmenityGroupUpdate.
func (mr *MockStoreMockRecorder) AmenityGroupUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenityGroupUpdate", reflect.TypeOf((*MockStore)(nil).AmenityGroupUpdate), arg0, arg1)
}

// AmenityGroupsFilterList mocks base method.
func (m *MockStore) AmenityGroupsFilterList(arg0 context.Context) ([]db.AmenityGroupsFilterListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenityGroupsFilterList", arg0)
	ret0, _ := ret[0].([]db.AmenityGroupsFilterListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenityGroupsFilterList indicates an expected call of AmenityGroupsFilterList.
func (mr *MockStoreMockRecorder) AmenityGroupsFilterList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenityGroupsFilterList", reflect.TypeOf((*MockStore)(nil).AmenityGroupsFilterList), arg0)
}

// AmenityGroupsInputList mocks base method.
func (m *MockStore) AmenityGroupsInputList(arg0 context.Context) ([]db.AmenityGroupsInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenityGroupsInputList", arg0)
	ret0, _ := ret[0].([]db.AmenityGroupsInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenityGroupsInputList indicates an expected call of AmenityGroupsInputList.
func (mr *MockStoreMockRecorder) AmenityGroupsInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenityGroupsInputList", reflect.TypeOf((*MockStore)(nil).AmenityGroupsInputList), arg0)
}

// AmenityGroupsList mocks base method.
func (m *MockStore) AmenityGroupsList(arg0 context.Context) ([]db.PropertiesSchemaAmenityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenityGroupsList", arg0)
	ret0, _ := ret[0].([]db.PropertiesSchemaAmenityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenityGroupsList indicates an expected call of AmenityGroupsList.
func (mr *MockStoreMockRecorder) AmenityGroupsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenityGroupsList", reflect.TypeOf((*MockStore)(nil).AmenityGroupsList), arg0)
}

// AmenityUpdate mocks base method.
func (m *MockStore) AmenityUpdate(arg0 context.Context, arg1 db.AmenityUpdateParams) (db.PropertiesSchemaAmenity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenityUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaAmenity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenityUpdate indicates an expected call of AmenityUpdate.
func (mr *MockStoreMockRecorder) AmenityUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenityUpdate", reflect.TypeOf((*MockStore)(nil).AmenityUpdate), arg0, arg1)
}

// AmenityValueTypesInputList mocks base method.
func (m *MockStore) AmenityValueTypesInputList(arg0 context.Context) ([]db.AmenityValueTypesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmenityValueTypesInputList", arg0)
	ret0, _ := ret[0].([]db.AmenityValueTypesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmenityValueTypesInputList indicates an expected call of AmenityValueTypesInputList.
func (mr *MockStoreMockRecorder) AmenityValueTypesInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmenityValueTypesInputList", reflect.TypeOf((*MockStore)(nil).AmenityValueTypesInputList), arg0)
}

// AuthUserIDFindByEmail mocks base method.
func (m *MockStore) AuthUserIDFindByEmail(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUserIDFindByEmail", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUserIDFindByEmail indicates an expected call of AuthUserIDFindByEmail.
func (mr *MockStoreMockRecorder) AuthUserIDFindByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUserIDFindByEmail", reflect.TypeOf((*MockStore)(nil).AuthUserIDFindByEmail), arg0, arg1)
}

// BedTypesInputList mocks base method.
func (m *MockStore) BedTypesInputList(arg0 context.Context) ([]db.BedTypesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BedTypesInputList", arg0)
	ret0, _ := ret[0].([]db.BedTypesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BedTypesInputList indicates an expected call of BedTypesInputList.
func (mr *MockStoreMockRecorder) BedTypesInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BedTypesInputList", reflect.TypeOf((*MockStore)(nil).BedTypesInputList), arg0)
}

// CancelationPoliciesInputList mocks base method.
func (m *MockStore) CancelationPoliciesInputList(arg0 context.Context) ([]db.CancelationPoliciesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelationPoliciesInputList", arg0)
	ret0, _ := ret[0].([]db.CancelationPoliciesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelationPoliciesInputList indicates an expected call of CancelationPoliciesInputList.
func (mr *MockStoreMockRecorder) CancelationPoliciesInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelationPoliciesInputList", reflect.TypeOf((*MockStore)(nil).CancelationPoliciesInputList), arg0)
}

// CancelationPoliciesList mocks base method.
func (m *MockStore) CancelationPoliciesList(arg0 context.Context) ([]db.RatesSchemaCancelationPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelationPoliciesList", arg0)
	ret0, _ := ret[0].([]db.RatesSchemaCancelationPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelationPoliciesList indicates an expected call of CancelationPoliciesList.
func (mr *MockStoreMockRecorder) CancelationPoliciesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelationPoliciesList", reflect.TypeOf((*MockStore)(nil).CancelationPoliciesList), arg0)
}

// CancelationPolicyCreateUpdate mocks base method.
func (m *MockStore) CancelationPolicyCreateUpdate(arg0 context.Context, arg1 db.CancelationPolicyCreateUpdateParams) (db.CancelationPolicyCreateUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelationPolicyCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.CancelationPolicyCreateUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelationPolicyCreateUpdate indicates an expected call of CancelationPolicyCreateUpdate.
func (mr *MockStoreMockRecorder) CancelationPolicyCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelationPolicyCreateUpdate", reflect.TypeOf((*MockStore)(nil).CancelationPolicyCreateUpdate), arg0, arg1)
}

// CancelationPolicyDelete mocks base method.
func (m *MockStore) CancelationPolicyDelete(arg0 context.Context, arg1 []int32) (db.RatesSchemaCancelationPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelationPolicyDelete", arg0, arg1)
	ret0, _ := ret[0].(db.RatesSchemaCancelationPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelationPolicyDelete indicates an expected call of CancelationPolicyDelete.
func (mr *MockStoreMockRecorder) CancelationPolicyDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelationPolicyDelete", reflect.TypeOf((*MockStore)(nil).CancelationPolicyDelete), arg0, arg1)
}

// CancelationPolicyDeleteRestore mocks base method.
func (m *MockStore) CancelationPolicyDeleteRestore(arg0 context.Context, arg1 []int32) (db.RatesSchemaCancelationPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelationPolicyDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(db.RatesSchemaCancelationPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelationPolicyDeleteRestore indicates an expected call of CancelationPolicyDeleteRestore.
func (mr *MockStoreMockRecorder) CancelationPolicyDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelationPolicyDeleteRestore", reflect.TypeOf((*MockStore)(nil).CancelationPolicyDeleteRestore), arg0, arg1)
}

// CancelationPolicyFind mocks base method.
func (m *MockStore) CancelationPolicyFind(arg0 context.Context, arg1 int32) (db.CancelationPolicyFindRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelationPolicyFind", arg0, arg1)
	ret0, _ := ret[0].(db.CancelationPolicyFindRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelationPolicyFind indicates an expected call of CancelationPolicyFind.
func (mr *MockStoreMockRecorder) CancelationPolicyFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelationPolicyFind", reflect.TypeOf((*MockStore)(nil).CancelationPolicyFind), arg0, arg1)
}

// CancelationPolicyFindForUpdate mocks base method.
func (m *MockStore) CancelationPolicyFindForUpdate(arg0 context.Context, arg1 int32) (db.CancelationPolicyFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelationPolicyFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.CancelationPolicyFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelationPolicyFindForUpdate indicates an expected call of CancelationPolicyFindForUpdate.
func (mr *MockStoreMockRecorder) CancelationPolicyFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelationPolicyFindForUpdate", reflect.TypeOf((*MockStore)(nil).CancelationPolicyFindForUpdate), arg0, arg1)
}

// CitiesFilterList mocks base method.
func (m *MockStore) CitiesFilterList(arg0 context.Context) ([]db.CitiesFilterListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CitiesFilterList", arg0)
	ret0, _ := ret[0].([]db.CitiesFilterListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CitiesFilterList indicates an expected call of CitiesFilterList.
func (mr *MockStoreMockRecorder) CitiesFilterList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CitiesFilterList", reflect.TypeOf((*MockStore)(nil).CitiesFilterList), arg0)
}

// CitiesInputList mocks base method.
func (m *MockStore) CitiesInputList(arg0 context.Context) ([]db.CitiesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CitiesInputList", arg0)
	ret0, _ := ret[0].([]db.CitiesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CitiesInputList indicates an expected call of CitiesInputList.
func (mr *MockStoreMockRecorder) CitiesInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CitiesInputList", reflect.TypeOf((*MockStore)(nil).CitiesInputList), arg0)
}

// CitiesList mocks base method.
func (m *MockStore) CitiesList(arg0 context.Context) ([]db.PropertiesSchemaCity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CitiesList", arg0)
	ret0, _ := ret[0].([]db.PropertiesSchemaCity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CitiesList indicates an expected call of CitiesList.
func (mr *MockStoreMockRecorder) CitiesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CitiesList", reflect.TypeOf((*MockStore)(nil).CitiesList), arg0)
}

// CityCreate mocks base method.
func (m *MockStore) CityCreate(arg0 context.Context, arg1 db.CityCreateParams) (db.PropertiesSchemaCity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CityCreate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaCity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CityCreate indicates an expected call of CityCreate.
func (mr *MockStoreMockRecorder) CityCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityCreate", reflect.TypeOf((*MockStore)(nil).CityCreate), arg0, arg1)
}

// CityDeleteRestore mocks base method.
func (m *MockStore) CityDeleteRestore(arg0 context.Context, arg1 []int32) (db.PropertiesSchemaCity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CityDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaCity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CityDeleteRestore indicates an expected call of CityDeleteRestore.
func (mr *MockStoreMockRecorder) CityDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityDeleteRestore", reflect.TypeOf((*MockStore)(nil).CityDeleteRestore), arg0, arg1)
}

// CityFind mocks base method.
func (m *MockStore) CityFind(arg0 context.Context, arg1 int32) (db.PropertiesSchemaCity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CityFind", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaCity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CityFind indicates an expected call of CityFind.
func (mr *MockStoreMockRecorder) CityFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityFind", reflect.TypeOf((*MockStore)(nil).CityFind), arg0, arg1)
}

// CityFindForUpdate mocks base method.
func (m *MockStore) CityFindForUpdate(arg0 context.Context, arg1 int32) (db.CityFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CityFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.CityFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CityFindForUpdate indicates an expected call of CityFindForUpdate.
func (mr *MockStoreMockRecorder) CityFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityFindForUpdate", reflect.TypeOf((*MockStore)(nil).CityFindForUpdate), arg0, arg1)
}

// CityUpdate mocks base method.
func (m *MockStore) CityUpdate(arg0 context.Context, arg1 db.CityUpdateParams) (db.PropertiesSchemaCity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CityUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaCity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CityUpdate indicates an expected call of CityUpdate.
func (mr *MockStoreMockRecorder) CityUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityUpdate", reflect.TypeOf((*MockStore)(nil).CityUpdate), arg0, arg1)
}

// CompoundCreate mocks base method.
func (m *MockStore) CompoundCreate(arg0 context.Context, arg1 db.CompoundCreateParams) (db.PropertiesSchemaCompound, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompoundCreate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaCompound)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompoundCreate indicates an expected call of CompoundCreate.
func (mr *MockStoreMockRecorder) CompoundCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompoundCreate", reflect.TypeOf((*MockStore)(nil).CompoundCreate), arg0, arg1)
}

// CompoundDeleteRestore mocks base method.
func (m *MockStore) CompoundDeleteRestore(arg0 context.Context, arg1 []int32) (db.PropertiesSchemaCompound, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompoundDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaCompound)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompoundDeleteRestore indicates an expected call of CompoundDeleteRestore.
func (mr *MockStoreMockRecorder) CompoundDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompoundDeleteRestore", reflect.TypeOf((*MockStore)(nil).CompoundDeleteRestore), arg0, arg1)
}

// CompoundFind mocks base method.
func (m *MockStore) CompoundFind(arg0 context.Context, arg1 int32) (db.PropertiesSchemaCompoundsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompoundFind", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaCompoundsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompoundFind indicates an expected call of CompoundFind.
func (mr *MockStoreMockRecorder) CompoundFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompoundFind", reflect.TypeOf((*MockStore)(nil).CompoundFind), arg0, arg1)
}

// CompoundFindForUpdate mocks base method.
func (m *MockStore) CompoundFindForUpdate(arg0 context.Context, arg1 int32) (db.CompoundFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompoundFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.CompoundFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompoundFindForUpdate indicates an expected call of CompoundFindForUpdate.
func (mr *MockStoreMockRecorder) CompoundFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompoundFindForUpdate", reflect.TypeOf((*MockStore)(nil).CompoundFindForUpdate), arg0, arg1)
}

// CompoundUpdate mocks base method.
func (m *MockStore) CompoundUpdate(arg0 context.Context, arg1 db.CompoundUpdateParams) (db.PropertiesSchemaCompound, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompoundUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaCompound)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompoundUpdate indicates an expected call of CompoundUpdate.
func (mr *MockStoreMockRecorder) CompoundUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompoundUpdate", reflect.TypeOf((*MockStore)(nil).CompoundUpdate), arg0, arg1)
}

// CompoundsInputList mocks base method.
func (m *MockStore) CompoundsInputList(arg0 context.Context) ([]db.CompoundsInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompoundsInputList", arg0)
	ret0, _ := ret[0].([]db.CompoundsInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompoundsInputList indicates an expected call of CompoundsInputList.
func (mr *MockStoreMockRecorder) CompoundsInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompoundsInputList", reflect.TypeOf((*MockStore)(nil).CompoundsInputList), arg0)
}

// CompoundsList mocks base method.
func (m *MockStore) CompoundsList(arg0 context.Context) ([]db.PropertiesSchemaCompound, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompoundsList", arg0)
	ret0, _ := ret[0].([]db.PropertiesSchemaCompound)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompoundsList indicates an expected call of CompoundsList.
func (mr *MockStoreMockRecorder) CompoundsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompoundsList", reflect.TypeOf((*MockStore)(nil).CompoundsList), arg0)
}

// CustomerCreateUpdate mocks base method.
func (m *MockStore) CustomerCreateUpdate(arg0 context.Context, arg1 db.CustomerCreateUpdateParams) (db.AccountsSchemaCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerCreateUpdate indicates an expected call of CustomerCreateUpdate.
func (mr *MockStoreMockRecorder) CustomerCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerCreateUpdate", reflect.TypeOf((*MockStore)(nil).CustomerCreateUpdate), arg0, arg1)
}

// CustomerDeleteRestore mocks base method.
func (m *MockStore) CustomerDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerDeleteRestore indicates an expected call of CustomerDeleteRestore.
func (mr *MockStoreMockRecorder) CustomerDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerDeleteRestore", reflect.TypeOf((*MockStore)(nil).CustomerDeleteRestore), arg0, arg1)
}

// CustomerFind mocks base method.
func (m *MockStore) CustomerFind(arg0 context.Context, arg1 db.CustomerFindParams) (db.CustomerFindRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerFind", arg0, arg1)
	ret0, _ := ret[0].(db.CustomerFindRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerFind indicates an expected call of CustomerFind.
func (mr *MockStoreMockRecorder) CustomerFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerFind", reflect.TypeOf((*MockStore)(nil).CustomerFind), arg0, arg1)
}

// CustomerResetPassword mocks base method.
func (m *MockStore) CustomerResetPassword(arg0 context.Context, arg1 db.CustomerResetPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerResetPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerResetPassword indicates an expected call of CustomerResetPassword.
func (mr *MockStoreMockRecorder) CustomerResetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerResetPassword", reflect.TypeOf((*MockStore)(nil).CustomerResetPassword), arg0, arg1)
}

// CustomersList mocks base method.
func (m *MockStore) CustomersList(arg0 context.Context) ([]db.AccountsSchemaCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomersList", arg0)
	ret0, _ := ret[0].([]db.AccountsSchemaCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomersList indicates an expected call of CustomersList.
func (mr *MockStoreMockRecorder) CustomersList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomersList", reflect.TypeOf((*MockStore)(nil).CustomersList), arg0)
}

// DbErrorParser mocks base method.
func (m *MockStore) DbErrorParser(arg0 error, arg1 map[string]string) *connect.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbErrorParser", arg0, arg1)
	ret0, _ := ret[0].(*connect.Error)
	return ret0
}

// DbErrorParser indicates an expected call of DbErrorParser.
func (mr *MockStoreMockRecorder) DbErrorParser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbErrorParser", reflect.TypeOf((*MockStore)(nil).DbErrorParser), arg0, arg1)
}

// IconsInputList mocks base method.
func (m *MockStore) IconsInputList(arg0 context.Context) ([]db.Icon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IconsInputList", arg0)
	ret0, _ := ret[0].([]db.Icon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IconsInputList indicates an expected call of IconsInputList.
func (mr *MockStoreMockRecorder) IconsInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IconsInputList", reflect.TypeOf((*MockStore)(nil).IconsInputList), arg0)
}

// InventoryCreateUpdate mocks base method.
func (m *MockStore) InventoryCreateUpdate(arg0 context.Context, arg1 db.InventoryCreateUpdateParams) ([]db.RatesSchemaInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].([]db.RatesSchemaInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryCreateUpdate indicates an expected call of InventoryCreateUpdate.
func (mr *MockStoreMockRecorder) InventoryCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryCreateUpdate", reflect.TypeOf((*MockStore)(nil).InventoryCreateUpdate), arg0, arg1)
}

// InventoryList mocks base method.
func (m *MockStore) InventoryList(arg0 context.Context, arg1 db.InventoryListParams) ([]db.InventoryListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryList", arg0, arg1)
	ret0, _ := ret[0].([]db.InventoryListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryList indicates an expected call of InventoryList.
func (mr *MockStoreMockRecorder) InventoryList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryList", reflect.TypeOf((*MockStore)(nil).InventoryList), arg0, arg1)
}

// InventoryListWithResources mocks base method.
func (m *MockStore) InventoryListWithResources(arg0 context.Context, arg1 db.InventoryListWithResourcesParams) (db.InventoryListWithResourcesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryListWithResources", arg0, arg1)
	ret0, _ := ret[0].(db.InventoryListWithResourcesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryListWithResources indicates an expected call of InventoryListWithResources.
func (mr *MockStoreMockRecorder) InventoryListWithResources(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryListWithResources", reflect.TypeOf((*MockStore)(nil).InventoryListWithResources), arg0, arg1)
}

// InventoryResize mocks base method.
func (m *MockStore) InventoryResize(arg0 context.Context, arg1 db.InventoryResizeParams) ([]db.RatesSchemaInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryResize", arg0, arg1)
	ret0, _ := ret[0].([]db.RatesSchemaInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryResize indicates an expected call of InventoryResize.
func (mr *MockStoreMockRecorder) InventoryResize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryResize", reflect.TypeOf((*MockStore)(nil).InventoryResize), arg0, arg1)
}

// InventoryResourcesList mocks base method.
func (m *MockStore) InventoryResourcesList(arg0 context.Context, arg1 db.InventoryResourcesListParams) ([]db.InventoryResourcesListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryResourcesList", arg0, arg1)
	ret0, _ := ret[0].([]db.InventoryResourcesListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryResourcesList indicates an expected call of InventoryResourcesList.
func (mr *MockStoreMockRecorder) InventoryResourcesList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryResourcesList", reflect.TypeOf((*MockStore)(nil).InventoryResourcesList), arg0, arg1)
}

// LocationCreate mocks base method.
func (m *MockStore) LocationCreate(arg0 context.Context, arg1 db.LocationCreateParams) (db.PropertiesSchemaLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationCreate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationCreate indicates an expected call of LocationCreate.
func (mr *MockStoreMockRecorder) LocationCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationCreate", reflect.TypeOf((*MockStore)(nil).LocationCreate), arg0, arg1)
}

// LocationDeleteRestore mocks base method.
func (m *MockStore) LocationDeleteRestore(arg0 context.Context, arg1 []int32) (db.PropertiesSchemaLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationDeleteRestore indicates an expected call of LocationDeleteRestore.
func (mr *MockStoreMockRecorder) LocationDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationDeleteRestore", reflect.TypeOf((*MockStore)(nil).LocationDeleteRestore), arg0, arg1)
}

// LocationFind mocks base method.
func (m *MockStore) LocationFind(arg0 context.Context, arg1 int32) (db.PropertiesSchemaLocationsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationFind", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaLocationsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationFind indicates an expected call of LocationFind.
func (mr *MockStoreMockRecorder) LocationFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationFind", reflect.TypeOf((*MockStore)(nil).LocationFind), arg0, arg1)
}

// LocationFindForUpdate mocks base method.
func (m *MockStore) LocationFindForUpdate(arg0 context.Context, arg1 int32) (db.LocationFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.LocationFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationFindForUpdate indicates an expected call of LocationFindForUpdate.
func (mr *MockStoreMockRecorder) LocationFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationFindForUpdate", reflect.TypeOf((*MockStore)(nil).LocationFindForUpdate), arg0, arg1)
}

// LocationUpdate mocks base method.
func (m *MockStore) LocationUpdate(arg0 context.Context, arg1 db.LocationUpdateParams) (db.PropertiesSchemaLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationUpdate indicates an expected call of LocationUpdate.
func (mr *MockStoreMockRecorder) LocationUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationUpdate", reflect.TypeOf((*MockStore)(nil).LocationUpdate), arg0, arg1)
}

// LocationsInputList mocks base method.
func (m *MockStore) LocationsInputList(arg0 context.Context) ([]db.LocationsInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationsInputList", arg0)
	ret0, _ := ret[0].([]db.LocationsInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationsInputList indicates an expected call of LocationsInputList.
func (mr *MockStoreMockRecorder) LocationsInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationsInputList", reflect.TypeOf((*MockStore)(nil).LocationsInputList), arg0)
}

// LocationsList mocks base method.
func (m *MockStore) LocationsList(arg0 context.Context) ([]db.PropertiesSchemaLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocationsList", arg0)
	ret0, _ := ret[0].([]db.PropertiesSchemaLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocationsList indicates an expected call of LocationsList.
func (mr *MockStoreMockRecorder) LocationsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocationsList", reflect.TypeOf((*MockStore)(nil).LocationsList), arg0)
}

// OwnerCreate mocks base method.
func (m *MockStore) OwnerCreate(arg0 context.Context, arg1 db.OwnerCreateParams) (db.AccountsSchemaOwner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerCreate", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaOwner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OwnerCreate indicates an expected call of OwnerCreate.
func (mr *MockStoreMockRecorder) OwnerCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerCreate", reflect.TypeOf((*MockStore)(nil).OwnerCreate), arg0, arg1)
}

// OwnerDeleteRestore mocks base method.
func (m *MockStore) OwnerDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OwnerDeleteRestore indicates an expected call of OwnerDeleteRestore.
func (mr *MockStoreMockRecorder) OwnerDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerDeleteRestore", reflect.TypeOf((*MockStore)(nil).OwnerDeleteRestore), arg0, arg1)
}

// OwnerFind mocks base method.
func (m *MockStore) OwnerFind(arg0 context.Context, arg1 int32) (db.AccountsSchemaOwnersView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerFind", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaOwnersView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OwnerFind indicates an expected call of OwnerFind.
func (mr *MockStoreMockRecorder) OwnerFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerFind", reflect.TypeOf((*MockStore)(nil).OwnerFind), arg0, arg1)
}

// OwnerFindByEmailOrCode mocks base method.
func (m *MockStore) OwnerFindByEmailOrCode(arg0 context.Context, arg1 string) (db.AccountsSchemaOwnersView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerFindByEmailOrCode", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaOwnersView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OwnerFindByEmailOrCode indicates an expected call of OwnerFindByEmailOrCode.
func (mr *MockStoreMockRecorder) OwnerFindByEmailOrCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerFindByEmailOrCode", reflect.TypeOf((*MockStore)(nil).OwnerFindByEmailOrCode), arg0, arg1)
}

// OwnerFindForUpdate mocks base method.
func (m *MockStore) OwnerFindForUpdate(arg0 context.Context, arg1 int32) (db.OwnerFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.OwnerFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OwnerFindForUpdate indicates an expected call of OwnerFindForUpdate.
func (mr *MockStoreMockRecorder) OwnerFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerFindForUpdate", reflect.TypeOf((*MockStore)(nil).OwnerFindForUpdate), arg0, arg1)
}

// OwnerResetPassword mocks base method.
func (m *MockStore) OwnerResetPassword(arg0 context.Context, arg1 db.OwnerResetPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerResetPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OwnerResetPassword indicates an expected call of OwnerResetPassword.
func (mr *MockStoreMockRecorder) OwnerResetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerResetPassword", reflect.TypeOf((*MockStore)(nil).OwnerResetPassword), arg0, arg1)
}

// OwnerUpdate mocks base method.
func (m *MockStore) OwnerUpdate(arg0 context.Context, arg1 db.OwnerUpdateParams) (db.AccountsSchemaOwner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaOwner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OwnerUpdate indicates an expected call of OwnerUpdate.
func (mr *MockStoreMockRecorder) OwnerUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerUpdate", reflect.TypeOf((*MockStore)(nil).OwnerUpdate), arg0, arg1)
}

// OwnersInputList mocks base method.
func (m *MockStore) OwnersInputList(arg0 context.Context) ([]db.OwnersInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnersInputList", arg0)
	ret0, _ := ret[0].([]db.OwnersInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OwnersInputList indicates an expected call of OwnersInputList.
func (mr *MockStoreMockRecorder) OwnersInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnersInputList", reflect.TypeOf((*MockStore)(nil).OwnersInputList), arg0)
}

// OwnersList mocks base method.
func (m *MockStore) OwnersList(arg0 context.Context) ([]db.AccountsSchemaOwner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnersList", arg0)
	ret0, _ := ret[0].([]db.AccountsSchemaOwner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OwnersList indicates an expected call of OwnersList.
func (mr *MockStoreMockRecorder) OwnersList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnersList", reflect.TypeOf((*MockStore)(nil).OwnersList), arg0)
}

// PaymentCreate mocks base method.
func (m *MockStore) PaymentCreate(arg0 context.Context, arg1 db.PaymentCreateParams) (db.ReservationsSchemaPaymentsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentCreate", arg0, arg1)
	ret0, _ := ret[0].(db.ReservationsSchemaPaymentsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentCreate indicates an expected call of PaymentCreate.
func (mr *MockStoreMockRecorder) PaymentCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentCreate", reflect.TypeOf((*MockStore)(nil).PaymentCreate), arg0, arg1)
}

// PaymentMethodsInputList mocks base method.
func (m *MockStore) PaymentMethodsInputList(arg0 context.Context, arg1 int32) ([]db.PaymentMethodsInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentMethodsInputList", arg0, arg1)
	ret0, _ := ret[0].([]db.PaymentMethodsInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentMethodsInputList indicates an expected call of PaymentMethodsInputList.
func (mr *MockStoreMockRecorder) PaymentMethodsInputList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentMethodsInputList", reflect.TypeOf((*MockStore)(nil).PaymentMethodsInputList), arg0, arg1)
}

// PaymentStatusesInputList mocks base method.
func (m *MockStore) PaymentStatusesInputList(arg0 context.Context) ([]db.PaymentStatusesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentStatusesInputList", arg0)
	ret0, _ := ret[0].([]db.PaymentStatusesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentStatusesInputList indicates an expected call of PaymentStatusesInputList.
func (mr *MockStoreMockRecorder) PaymentStatusesInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentStatusesInputList", reflect.TypeOf((*MockStore)(nil).PaymentStatusesInputList), arg0)
}

// PaymentUpdateStatus mocks base method.
func (m *MockStore) PaymentUpdateStatus(arg0 context.Context, arg1 db.PaymentUpdateStatusParams) (db.ReservationsSchemaPaymentsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentUpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(db.ReservationsSchemaPaymentsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentUpdateStatus indicates an expected call of PaymentUpdateStatus.
func (mr *MockStoreMockRecorder) PaymentUpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentUpdateStatus", reflect.TypeOf((*MockStore)(nil).PaymentUpdateStatus), arg0, arg1)
}

// PaymentsList mocks base method.
func (m *MockStore) PaymentsList(arg0 context.Context) ([]db.PaymentsListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentsList", arg0)
	ret0, _ := ret[0].([]db.PaymentsListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentsList indicates an expected call of PaymentsList.
func (mr *MockStoreMockRecorder) PaymentsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentsList", reflect.TypeOf((*MockStore)(nil).PaymentsList), arg0)
}

// PermissionsList mocks base method.
func (m *MockStore) PermissionsList(arg0 context.Context) ([]db.PermissionsListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermissionsList", arg0)
	ret0, _ := ret[0].([]db.PermissionsListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PermissionsList indicates an expected call of PermissionsList.
func (mr *MockStoreMockRecorder) PermissionsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermissionsList", reflect.TypeOf((*MockStore)(nil).PermissionsList), arg0)
}

// PropertiesInputList mocks base method.
func (m *MockStore) PropertiesInputList(arg0 context.Context, arg1 int32) ([]db.PropertiesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesInputList", arg0, arg1)
	ret0, _ := ret[0].([]db.PropertiesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesInputList indicates an expected call of PropertiesInputList.
func (mr *MockStoreMockRecorder) PropertiesInputList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesInputList", reflect.TypeOf((*MockStore)(nil).PropertiesInputList), arg0, arg1)
}

// PropertiesInputListFlat mocks base method.
func (m *MockStore) PropertiesInputListFlat(arg0 context.Context) ([]db.PropertiesInputListFlatRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesInputListFlat", arg0)
	ret0, _ := ret[0].([]db.PropertiesInputListFlatRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesInputListFlat indicates an expected call of PropertiesInputListFlat.
func (mr *MockStoreMockRecorder) PropertiesInputListFlat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesInputListFlat", reflect.TypeOf((*MockStore)(nil).PropertiesInputListFlat), arg0)
}

// PropertiesList mocks base method.
func (m *MockStore) PropertiesList(arg0 context.Context) ([]db.PropertiesSchemaPropertiesView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesList", arg0)
	ret0, _ := ret[0].([]db.PropertiesSchemaPropertiesView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesList indicates an expected call of PropertiesList.
func (mr *MockStoreMockRecorder) PropertiesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesList", reflect.TypeOf((*MockStore)(nil).PropertiesList), arg0)
}

// PropertiesListFiltered mocks base method.
func (m *MockStore) PropertiesListFiltered(arg0 context.Context, arg1 db.PropertiesListFilteredParams) ([]db.PropertiesListFilteredRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesListFiltered", arg0, arg1)
	ret0, _ := ret[0].([]db.PropertiesListFilteredRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesListFiltered indicates an expected call of PropertiesListFiltered.
func (mr *MockStoreMockRecorder) PropertiesListFiltered(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesListFiltered", reflect.TypeOf((*MockStore)(nil).PropertiesListFiltered), arg0, arg1)
}

// PropertyCategoriesInputList mocks base method.
func (m *MockStore) PropertyCategoriesInputList(arg0 context.Context) ([]db.PropertyCategoriesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyCategoriesInputList", arg0)
	ret0, _ := ret[0].([]db.PropertyCategoriesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyCategoriesInputList indicates an expected call of PropertyCategoriesInputList.
func (mr *MockStoreMockRecorder) PropertyCategoriesInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyCategoriesInputList", reflect.TypeOf((*MockStore)(nil).PropertyCategoriesInputList), arg0)
}

// PropertyCreateUpdate mocks base method.
func (m *MockStore) PropertyCreateUpdate(arg0 context.Context, arg1 db.PropertyCreateUpdateParams) (db.PropertiesSchemaPropertiesView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaPropertiesView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyCreateUpdate indicates an expected call of PropertyCreateUpdate.
func (mr *MockStoreMockRecorder) PropertyCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyCreateUpdate", reflect.TypeOf((*MockStore)(nil).PropertyCreateUpdate), arg0, arg1)
}

// PropertyDelete mocks base method.
func (m *MockStore) PropertyDelete(arg0 context.Context, arg1 []int32) (db.PropertiesSchemaProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyDelete", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyDelete indicates an expected call of PropertyDelete.
func (mr *MockStoreMockRecorder) PropertyDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyDelete", reflect.TypeOf((*MockStore)(nil).PropertyDelete), arg0, arg1)
}

// PropertyDeleteRestore mocks base method.
func (m *MockStore) PropertyDeleteRestore(arg0 context.Context, arg1 []int32) (db.PropertiesSchemaProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyDeleteRestore indicates an expected call of PropertyDeleteRestore.
func (mr *MockStoreMockRecorder) PropertyDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyDeleteRestore", reflect.TypeOf((*MockStore)(nil).PropertyDeleteRestore), arg0, arg1)
}

// PropertyFind mocks base method.
func (m *MockStore) PropertyFind(arg0 context.Context, arg1 int32) (db.PropertiesSchemaPropertiesView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyFind", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaPropertiesView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyFind indicates an expected call of PropertyFind.
func (mr *MockStoreMockRecorder) PropertyFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyFind", reflect.TypeOf((*MockStore)(nil).PropertyFind), arg0, arg1)
}

// PropertyFindFiltered mocks base method.
func (m *MockStore) PropertyFindFiltered(arg0 context.Context, arg1 db.PropertyFindFilteredParams) (db.PropertyFindFilteredRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyFindFiltered", arg0, arg1)
	ret0, _ := ret[0].(db.PropertyFindFilteredRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyFindFiltered indicates an expected call of PropertyFindFiltered.
func (mr *MockStoreMockRecorder) PropertyFindFiltered(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyFindFiltered", reflect.TypeOf((*MockStore)(nil).PropertyFindFiltered), arg0, arg1)
}

// PropertyFindForUpdate mocks base method.
func (m *MockStore) PropertyFindForUpdate(arg0 context.Context, arg1 int32) (db.PropertyFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertyFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyFindForUpdate indicates an expected call of PropertyFindForUpdate.
func (mr *MockStoreMockRecorder) PropertyFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyFindForUpdate", reflect.TypeOf((*MockStore)(nil).PropertyFindForUpdate), arg0, arg1)
}

// PropertyReservableUnitsList mocks base method.
func (m *MockStore) PropertyReservableUnitsList(arg0 context.Context, arg1 int32) ([]db.PropertiesSchemaReservableUnitsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyReservableUnitsList", arg0, arg1)
	ret0, _ := ret[0].([]db.PropertiesSchemaReservableUnitsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyReservableUnitsList indicates an expected call of PropertyReservableUnitsList.
func (mr *MockStoreMockRecorder) PropertyReservableUnitsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyReservableUnitsList", reflect.TypeOf((*MockStore)(nil).PropertyReservableUnitsList), arg0, arg1)
}

// PropertyTypeCreate mocks base method.
func (m *MockStore) PropertyTypeCreate(arg0 context.Context, arg1 db.PropertyTypeCreateParams) (db.PropertiesSchemaPropertyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyTypeCreate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaPropertyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyTypeCreate indicates an expected call of PropertyTypeCreate.
func (mr *MockStoreMockRecorder) PropertyTypeCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyTypeCreate", reflect.TypeOf((*MockStore)(nil).PropertyTypeCreate), arg0, arg1)
}

// PropertyTypeDeleteRestore mocks base method.
func (m *MockStore) PropertyTypeDeleteRestore(arg0 context.Context, arg1 []int32) (db.PropertiesSchemaPropertyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyTypeDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaPropertyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyTypeDeleteRestore indicates an expected call of PropertyTypeDeleteRestore.
func (mr *MockStoreMockRecorder) PropertyTypeDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyTypeDeleteRestore", reflect.TypeOf((*MockStore)(nil).PropertyTypeDeleteRestore), arg0, arg1)
}

// PropertyTypeFind mocks base method.
func (m *MockStore) PropertyTypeFind(arg0 context.Context, arg1 int32) (db.PropertiesSchemaPropertyTypesView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyTypeFind", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaPropertyTypesView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyTypeFind indicates an expected call of PropertyTypeFind.
func (mr *MockStoreMockRecorder) PropertyTypeFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyTypeFind", reflect.TypeOf((*MockStore)(nil).PropertyTypeFind), arg0, arg1)
}

// PropertyTypeFindForUpdate mocks base method.
func (m *MockStore) PropertyTypeFindForUpdate(arg0 context.Context, arg1 int32) (db.PropertyTypeFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyTypeFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertyTypeFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyTypeFindForUpdate indicates an expected call of PropertyTypeFindForUpdate.
func (mr *MockStoreMockRecorder) PropertyTypeFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyTypeFindForUpdate", reflect.TypeOf((*MockStore)(nil).PropertyTypeFindForUpdate), arg0, arg1)
}

// PropertyTypeUpdate mocks base method.
func (m *MockStore) PropertyTypeUpdate(arg0 context.Context, arg1 db.PropertyTypeUpdateParams) (db.PropertiesSchemaPropertyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyTypeUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaPropertyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyTypeUpdate indicates an expected call of PropertyTypeUpdate.
func (mr *MockStoreMockRecorder) PropertyTypeUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyTypeUpdate", reflect.TypeOf((*MockStore)(nil).PropertyTypeUpdate), arg0, arg1)
}

// PropertyTypesFilterList mocks base method.
func (m *MockStore) PropertyTypesFilterList(arg0 context.Context) ([]db.PropertyTypesFilterListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyTypesFilterList", arg0)
	ret0, _ := ret[0].([]db.PropertyTypesFilterListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyTypesFilterList indicates an expected call of PropertyTypesFilterList.
func (mr *MockStoreMockRecorder) PropertyTypesFilterList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyTypesFilterList", reflect.TypeOf((*MockStore)(nil).PropertyTypesFilterList), arg0)
}

// PropertyTypesInputList mocks base method.
func (m *MockStore) PropertyTypesInputList(arg0 context.Context, arg1 int32) ([]db.PropertyTypesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyTypesInputList", arg0, arg1)
	ret0, _ := ret[0].([]db.PropertyTypesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyTypesInputList indicates an expected call of PropertyTypesInputList.
func (mr *MockStoreMockRecorder) PropertyTypesInputList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyTypesInputList", reflect.TypeOf((*MockStore)(nil).PropertyTypesInputList), arg0, arg1)
}

// PropertyTypesList mocks base method.
func (m *MockStore) PropertyTypesList(arg0 context.Context) ([]db.PropertiesSchemaPropertyTypesView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertyTypesList", arg0)
	ret0, _ := ret[0].([]db.PropertiesSchemaPropertyTypesView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertyTypesList indicates an expected call of PropertyTypesList.
func (mr *MockStoreMockRecorder) PropertyTypesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertyTypesList", reflect.TypeOf((*MockStore)(nil).PropertyTypesList), arg0)
}

// RatePlanCreateUpdate mocks base method.
func (m *MockStore) RatePlanCreateUpdate(arg0 context.Context, arg1 db.RatePlanCreateUpdateParams) (db.RatesSchemaRatePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatePlanCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.RatesSchemaRatePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatePlanCreateUpdate indicates an expected call of RatePlanCreateUpdate.
func (mr *MockStoreMockRecorder) RatePlanCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatePlanCreateUpdate", reflect.TypeOf((*MockStore)(nil).RatePlanCreateUpdate), arg0, arg1)
}

// RatePlanDelete mocks base method.
func (m *MockStore) RatePlanDelete(arg0 context.Context, arg1 []int32) (db.RatesSchemaRatePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatePlanDelete", arg0, arg1)
	ret0, _ := ret[0].(db.RatesSchemaRatePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatePlanDelete indicates an expected call of RatePlanDelete.
func (mr *MockStoreMockRecorder) RatePlanDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatePlanDelete", reflect.TypeOf((*MockStore)(nil).RatePlanDelete), arg0, arg1)
}

// RatePlanDeleteRestore mocks base method.
func (m *MockStore) RatePlanDeleteRestore(arg0 context.Context, arg1 []int32) (db.RatesSchemaRatePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatePlanDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(db.RatesSchemaRatePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatePlanDeleteRestore indicates an expected call of RatePlanDeleteRestore.
func (mr *MockStoreMockRecorder) RatePlanDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatePlanDeleteRestore", reflect.TypeOf((*MockStore)(nil).RatePlanDeleteRestore), arg0, arg1)
}

// RatePlanFind mocks base method.
func (m *MockStore) RatePlanFind(arg0 context.Context, arg1 int32) (db.RatePlanFindRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatePlanFind", arg0, arg1)
	ret0, _ := ret[0].(db.RatePlanFindRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatePlanFind indicates an expected call of RatePlanFind.
func (mr *MockStoreMockRecorder) RatePlanFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatePlanFind", reflect.TypeOf((*MockStore)(nil).RatePlanFind), arg0, arg1)
}

// RatePlanFindForUpdate mocks base method.
func (m *MockStore) RatePlanFindForUpdate(arg0 context.Context, arg1 int32) (db.RatePlanFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatePlanFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.RatePlanFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatePlanFindForUpdate indicates an expected call of RatePlanFindForUpdate.
func (mr *MockStoreMockRecorder) RatePlanFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatePlanFindForUpdate", reflect.TypeOf((*MockStore)(nil).RatePlanFindForUpdate), arg0, arg1)
}

// RatePlanTypeCreateUpdate mocks base method.
func (m *MockStore) RatePlanTypeCreateUpdate(arg0 context.Context, arg1 db.RatePlanTypeCreateUpdateParams) (db.RatePlanTypeCreateUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatePlanTypeCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.RatePlanTypeCreateUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatePlanTypeCreateUpdate indicates an expected call of RatePlanTypeCreateUpdate.
func (mr *MockStoreMockRecorder) RatePlanTypeCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatePlanTypeCreateUpdate", reflect.TypeOf((*MockStore)(nil).RatePlanTypeCreateUpdate), arg0, arg1)
}

// RatePlanTypeDelete mocks base method.
func (m *MockStore) RatePlanTypeDelete(arg0 context.Context, arg1 []int32) (db.RatesSchemaRatePlanType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatePlanTypeDelete", arg0, arg1)
	ret0, _ := ret[0].(db.RatesSchemaRatePlanType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatePlanTypeDelete indicates an expected call of RatePlanTypeDelete.
func (mr *MockStoreMockRecorder) RatePlanTypeDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatePlanTypeDelete", reflect.TypeOf((*MockStore)(nil).RatePlanTypeDelete), arg0, arg1)
}

// RatePlanTypeDeleteRestore mocks base method.
func (m *MockStore) RatePlanTypeDeleteRestore(arg0 context.Context, arg1 []int32) (db.RatesSchemaRatePlanType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatePlanTypeDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(db.RatesSchemaRatePlanType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatePlanTypeDeleteRestore indicates an expected call of RatePlanTypeDeleteRestore.
func (mr *MockStoreMockRecorder) RatePlanTypeDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatePlanTypeDeleteRestore", reflect.TypeOf((*MockStore)(nil).RatePlanTypeDeleteRestore), arg0, arg1)
}

// RatePlanTypeFind mocks base method.
func (m *MockStore) RatePlanTypeFind(arg0 context.Context, arg1 int32) (db.RatePlanTypeFindRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatePlanTypeFind", arg0, arg1)
	ret0, _ := ret[0].(db.RatePlanTypeFindRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatePlanTypeFind indicates an expected call of RatePlanTypeFind.
func (mr *MockStoreMockRecorder) RatePlanTypeFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatePlanTypeFind", reflect.TypeOf((*MockStore)(nil).RatePlanTypeFind), arg0, arg1)
}

// RatePlanTypeFindForUpdate mocks base method.
func (m *MockStore) RatePlanTypeFindForUpdate(arg0 context.Context, arg1 int32) (db.RatePlanTypeFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatePlanTypeFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.RatePlanTypeFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatePlanTypeFindForUpdate indicates an expected call of RatePlanTypeFindForUpdate.
func (mr *MockStoreMockRecorder) RatePlanTypeFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatePlanTypeFindForUpdate", reflect.TypeOf((*MockStore)(nil).RatePlanTypeFindForUpdate), arg0, arg1)
}

// RatePlanTypesInputList mocks base method.
func (m *MockStore) RatePlanTypesInputList(arg0 context.Context) ([]db.RatePlanTypesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatePlanTypesInputList", arg0)
	ret0, _ := ret[0].([]db.RatePlanTypesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatePlanTypesInputList indicates an expected call of RatePlanTypesInputList.
func (mr *MockStoreMockRecorder) RatePlanTypesInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatePlanTypesInputList", reflect.TypeOf((*MockStore)(nil).RatePlanTypesInputList), arg0)
}

// RatePlanTypesList mocks base method.
func (m *MockStore) RatePlanTypesList(arg0 context.Context) ([]db.RatesSchemaRatePlanType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatePlanTypesList", arg0)
	ret0, _ := ret[0].([]db.RatesSchemaRatePlanType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatePlanTypesList indicates an expected call of RatePlanTypesList.
func (mr *MockStoreMockRecorder) RatePlanTypesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatePlanTypesList", reflect.TypeOf((*MockStore)(nil).RatePlanTypesList), arg0)
}

// RatePlansInputList mocks base method.
func (m *MockStore) RatePlansInputList(arg0 context.Context, arg1 int32) ([]db.RatePlansInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatePlansInputList", arg0, arg1)
	ret0, _ := ret[0].([]db.RatePlansInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatePlansInputList indicates an expected call of RatePlansInputList.
func (mr *MockStoreMockRecorder) RatePlansInputList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatePlansInputList", reflect.TypeOf((*MockStore)(nil).RatePlansInputList), arg0, arg1)
}

// RatePlansList mocks base method.
func (m *MockStore) RatePlansList(arg0 context.Context) ([]db.RatesSchemaRatePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RatePlansList", arg0)
	ret0, _ := ret[0].([]db.RatesSchemaRatePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RatePlansList indicates an expected call of RatePlansList.
func (mr *MockStoreMockRecorder) RatePlansList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RatePlansList", reflect.TypeOf((*MockStore)(nil).RatePlansList), arg0)
}

// ReservableUnitCreateUpdate mocks base method.
func (m *MockStore) ReservableUnitCreateUpdate(arg0 context.Context, arg1 db.ReservableUnitCreateUpdateParams) (db.PropertiesSchemaReservableUnitsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservableUnitCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaReservableUnitsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservableUnitCreateUpdate indicates an expected call of ReservableUnitCreateUpdate.
func (mr *MockStoreMockRecorder) ReservableUnitCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservableUnitCreateUpdate", reflect.TypeOf((*MockStore)(nil).ReservableUnitCreateUpdate), arg0, arg1)
}

// ReservableUnitDelete mocks base method.
func (m *MockStore) ReservableUnitDelete(arg0 context.Context, arg1 []int32) ([]db.PropertiesSchemaReservableUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservableUnitDelete", arg0, arg1)
	ret0, _ := ret[0].([]db.PropertiesSchemaReservableUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservableUnitDelete indicates an expected call of ReservableUnitDelete.
func (mr *MockStoreMockRecorder) ReservableUnitDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservableUnitDelete", reflect.TypeOf((*MockStore)(nil).ReservableUnitDelete), arg0, arg1)
}

// ReservableUnitDeleteRestore mocks base method.
func (m *MockStore) ReservableUnitDeleteRestore(arg0 context.Context, arg1 []int32) ([]db.PropertiesSchemaReservableUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservableUnitDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].([]db.PropertiesSchemaReservableUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservableUnitDeleteRestore indicates an expected call of ReservableUnitDeleteRestore.
func (mr *MockStoreMockRecorder) ReservableUnitDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservableUnitDeleteRestore", reflect.TypeOf((*MockStore)(nil).ReservableUnitDeleteRestore), arg0, arg1)
}

// ReservableUnitFind mocks base method.
func (m *MockStore) ReservableUnitFind(arg0 context.Context, arg1 int32) (db.PropertiesSchemaReservableUnitsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservableUnitFind", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaReservableUnitsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservableUnitFind indicates an expected call of ReservableUnitFind.
func (mr *MockStoreMockRecorder) ReservableUnitFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservableUnitFind", reflect.TypeOf((*MockStore)(nil).ReservableUnitFind), arg0, arg1)
}

// ReservableUnitFindFiltered mocks base method.
func (m *MockStore) ReservableUnitFindFiltered(arg0 context.Context, arg1 db.ReservableUnitFindFilteredParams) (db.ReservableUnitFindFilteredRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservableUnitFindFiltered", arg0, arg1)
	ret0, _ := ret[0].(db.ReservableUnitFindFilteredRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservableUnitFindFiltered indicates an expected call of ReservableUnitFindFiltered.
func (mr *MockStoreMockRecorder) ReservableUnitFindFiltered(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservableUnitFindFiltered", reflect.TypeOf((*MockStore)(nil).ReservableUnitFindFiltered), arg0, arg1)
}

// ReservableUnitFindForUpdate mocks base method.
func (m *MockStore) ReservableUnitFindForUpdate(arg0 context.Context, arg1 int32) (db.PropertiesSchemaReservableUnitsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservableUnitFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.PropertiesSchemaReservableUnitsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservableUnitFindForUpdate indicates an expected call of ReservableUnitFindForUpdate.
func (mr *MockStoreMockRecorder) ReservableUnitFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservableUnitFindForUpdate", reflect.TypeOf((*MockStore)(nil).ReservableUnitFindForUpdate), arg0, arg1)
}

// ReservableUnitRoomBedsCreateUpdate mocks base method.
func (m *MockStore) ReservableUnitRoomBedsCreateUpdate(arg0 context.Context, arg1 db.ReservableUnitRoomBedsCreateUpdateParams) ([]db.PropertiesSchemaReservableUnitRoomBed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservableUnitRoomBedsCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].([]db.PropertiesSchemaReservableUnitRoomBed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservableUnitRoomBedsCreateUpdate indicates an expected call of ReservableUnitRoomBedsCreateUpdate.
func (mr *MockStoreMockRecorder) ReservableUnitRoomBedsCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservableUnitRoomBedsCreateUpdate", reflect.TypeOf((*MockStore)(nil).ReservableUnitRoomBedsCreateUpdate), arg0, arg1)
}

// ReservableUnitRoomBedsFindForUpdate mocks base method.
func (m *MockStore) ReservableUnitRoomBedsFindForUpdate(arg0 context.Context, arg1 int32) ([]db.PropertiesSchemaReservableUnitRoomBed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservableUnitRoomBedsFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].([]db.PropertiesSchemaReservableUnitRoomBed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservableUnitRoomBedsFindForUpdate indicates an expected call of ReservableUnitRoomBedsFindForUpdate.
func (mr *MockStoreMockRecorder) ReservableUnitRoomBedsFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservableUnitRoomBedsFindForUpdate", reflect.TypeOf((*MockStore)(nil).ReservableUnitRoomBedsFindForUpdate), arg0, arg1)
}

// ReservableUnitTypesFilterList mocks base method.
func (m *MockStore) ReservableUnitTypesFilterList(arg0 context.Context) ([]db.ReservableUnitTypesFilterListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservableUnitTypesFilterList", arg0)
	ret0, _ := ret[0].([]db.ReservableUnitTypesFilterListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservableUnitTypesFilterList indicates an expected call of ReservableUnitTypesFilterList.
func (mr *MockStoreMockRecorder) ReservableUnitTypesFilterList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservableUnitTypesFilterList", reflect.TypeOf((*MockStore)(nil).ReservableUnitTypesFilterList), arg0)
}

// ReservableUnitTypesInputList mocks base method.
func (m *MockStore) ReservableUnitTypesInputList(arg0 context.Context, arg1 int32) ([]db.ReservableUnitTypesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservableUnitTypesInputList", arg0, arg1)
	ret0, _ := ret[0].([]db.ReservableUnitTypesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservableUnitTypesInputList indicates an expected call of ReservableUnitTypesInputList.
func (mr *MockStoreMockRecorder) ReservableUnitTypesInputList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservableUnitTypesInputList", reflect.TypeOf((*MockStore)(nil).ReservableUnitTypesInputList), arg0, arg1)
}

// ReservableUnitsInputList mocks base method.
func (m *MockStore) ReservableUnitsInputList(arg0 context.Context, arg1 int32) ([]db.ReservableUnitsInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservableUnitsInputList", arg0, arg1)
	ret0, _ := ret[0].([]db.ReservableUnitsInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservableUnitsInputList indicates an expected call of ReservableUnitsInputList.
func (mr *MockStoreMockRecorder) ReservableUnitsInputList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservableUnitsInputList", reflect.TypeOf((*MockStore)(nil).ReservableUnitsInputList), arg0, arg1)
}

// ReservableUnitsList mocks base method.
func (m *MockStore) ReservableUnitsList(arg0 context.Context) ([]db.ReservableUnitsListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservableUnitsList", arg0)
	ret0, _ := ret[0].([]db.ReservableUnitsListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservableUnitsList indicates an expected call of ReservableUnitsList.
func (mr *MockStoreMockRecorder) ReservableUnitsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservableUnitsList", reflect.TypeOf((*MockStore)(nil).ReservableUnitsList), arg0)
}

// ReservationCreate mocks base method.
func (m *MockStore) ReservationCreate(arg0 context.Context, arg1 db.ReservationCreateParams) (db.ReservationsSchemaReservationsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservationCreate", arg0, arg1)
	ret0, _ := ret[0].(db.ReservationsSchemaReservationsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservationCreate indicates an expected call of ReservationCreate.
func (mr *MockStoreMockRecorder) ReservationCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservationCreate", reflect.TypeOf((*MockStore)(nil).ReservationCreate), arg0, arg1)
}

// ReservationStatusesInputList mocks base method.
func (m *MockStore) ReservationStatusesInputList(arg0 context.Context) ([]db.ReservationStatusesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservationStatusesInputList", arg0)
	ret0, _ := ret[0].([]db.ReservationStatusesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservationStatusesInputList indicates an expected call of ReservationStatusesInputList.
func (mr *MockStoreMockRecorder) ReservationStatusesInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservationStatusesInputList", reflect.TypeOf((*MockStore)(nil).ReservationStatusesInputList), arg0)
}

// ReservationUpdateStatus mocks base method.
func (m *MockStore) ReservationUpdateStatus(arg0 context.Context, arg1 db.ReservationUpdateStatusParams) (db.ReservationsSchemaReservationsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservationUpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(db.ReservationsSchemaReservationsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservationUpdateStatus indicates an expected call of ReservationUpdateStatus.
func (mr *MockStoreMockRecorder) ReservationUpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservationUpdateStatus", reflect.TypeOf((*MockStore)(nil).ReservationUpdateStatus), arg0, arg1)
}

// ReservationsList mocks base method.
func (m *MockStore) ReservationsList(arg0 context.Context) ([]db.ReservationsListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReservationsList", arg0)
	ret0, _ := ret[0].([]db.ReservationsListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservationsList indicates an expected call of ReservationsList.
func (mr *MockStoreMockRecorder) ReservationsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservationsList", reflect.TypeOf((*MockStore)(nil).ReservationsList), arg0)
}

// RoleCreate mocks base method.
func (m *MockStore) RoleCreate(arg0 context.Context, arg1 db.RoleCreateParams) (db.AccountsSchemaRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleCreate", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleCreate indicates an expected call of RoleCreate.
func (mr *MockStoreMockRecorder) RoleCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleCreate", reflect.TypeOf((*MockStore)(nil).RoleCreate), arg0, arg1)
}

// RoleCreateTX mocks base method.
func (m *MockStore) RoleCreateTX(arg0 context.Context, arg1 db.RoleCreateTXParams) (db.RoleCreateTXResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleCreateTX", arg0, arg1)
	ret0, _ := ret[0].(db.RoleCreateTXResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleCreateTX indicates an expected call of RoleCreateTX.
func (mr *MockStoreMockRecorder) RoleCreateTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleCreateTX", reflect.TypeOf((*MockStore)(nil).RoleCreateTX), arg0, arg1)
}

// RoleDeleteRestore mocks base method.
func (m *MockStore) RoleDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RoleDeleteRestore indicates an expected call of RoleDeleteRestore.
func (mr *MockStoreMockRecorder) RoleDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleDeleteRestore", reflect.TypeOf((*MockStore)(nil).RoleDeleteRestore), arg0, arg1)
}

// RoleFindForUpdate mocks base method.
func (m *MockStore) RoleFindForUpdate(arg0 context.Context, arg1 int32) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleFindForUpdate indicates an expected call of RoleFindForUpdate.
func (mr *MockStoreMockRecorder) RoleFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleFindForUpdate", reflect.TypeOf((*MockStore)(nil).RoleFindForUpdate), arg0, arg1)
}

// RolePermissionsBulkCreate mocks base method.
func (m *MockStore) RolePermissionsBulkCreate(arg0 context.Context, arg1 []db.RolePermissionsBulkCreateParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolePermissionsBulkCreate", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolePermissionsBulkCreate indicates an expected call of RolePermissionsBulkCreate.
func (mr *MockStoreMockRecorder) RolePermissionsBulkCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolePermissionsBulkCreate", reflect.TypeOf((*MockStore)(nil).RolePermissionsBulkCreate), arg0, arg1)
}

// RolePermissionsClear mocks base method.
func (m *MockStore) RolePermissionsClear(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolePermissionsClear", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RolePermissionsClear indicates an expected call of RolePermissionsClear.
func (mr *MockStoreMockRecorder) RolePermissionsClear(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolePermissionsClear", reflect.TypeOf((*MockStore)(nil).RolePermissionsClear), arg0, arg1)
}

// RoleUpdate mocks base method.
func (m *MockStore) RoleUpdate(arg0 context.Context, arg1 db.RoleUpdateParams) (db.AccountsSchemaRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleUpdate indicates an expected call of RoleUpdate.
func (mr *MockStoreMockRecorder) RoleUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleUpdate", reflect.TypeOf((*MockStore)(nil).RoleUpdate), arg0, arg1)
}

// RoleUpdateTX mocks base method.
func (m *MockStore) RoleUpdateTX(arg0 context.Context, arg1 db.RoleUpdateTXParams) (db.RoleUpdateTXResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleUpdateTX", arg0, arg1)
	ret0, _ := ret[0].(db.RoleUpdateTXResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleUpdateTX indicates an expected call of RoleUpdateTX.
func (mr *MockStoreMockRecorder) RoleUpdateTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleUpdateTX", reflect.TypeOf((*MockStore)(nil).RoleUpdateTX), arg0, arg1)
}

// RolesInputList mocks base method.
func (m *MockStore) RolesInputList(arg0 context.Context) ([]db.RolesInputListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolesInputList", arg0)
	ret0, _ := ret[0].([]db.RolesInputListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolesInputList indicates an expected call of RolesInputList.
func (mr *MockStoreMockRecorder) RolesInputList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolesInputList", reflect.TypeOf((*MockStore)(nil).RolesInputList), arg0)
}

// RolesList mocks base method.
func (m *MockStore) RolesList(arg0 context.Context) ([]db.RolesListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolesList", arg0)
	ret0, _ := ret[0].([]db.RolesListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolesList indicates an expected call of RolesList.
func (mr *MockStoreMockRecorder) RolesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolesList", reflect.TypeOf((*MockStore)(nil).RolesList), arg0)
}

// SettingsFindForUpdate mocks base method.
func (m *MockStore) SettingsFindForUpdate(arg0 context.Context) ([]db.SettingsFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingsFindForUpdate", arg0)
	ret0, _ := ret[0].([]db.SettingsFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingsFindForUpdate indicates an expected call of SettingsFindForUpdate.
func (mr *MockStoreMockRecorder) SettingsFindForUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingsFindForUpdate", reflect.TypeOf((*MockStore)(nil).SettingsFindForUpdate), arg0)
}

// SettingsUpdate mocks base method.
func (m *MockStore) SettingsUpdate(arg0 context.Context, arg1 db.SettingsUpdateParams) (db.SettingsUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettingsUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.SettingsUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettingsUpdate indicates an expected call of SettingsUpdate.
func (mr *MockStoreMockRecorder) SettingsUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettingsUpdate", reflect.TypeOf((*MockStore)(nil).SettingsUpdate), arg0, arg1)
}

// TaxTemplatesList mocks base method.
func (m *MockStore) TaxTemplatesList(arg0 context.Context) ([]db.TaxTemplatesListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaxTemplatesList", arg0)
	ret0, _ := ret[0].([]db.TaxTemplatesListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaxTemplatesList indicates an expected call of TaxTemplatesList.
func (mr *MockStoreMockRecorder) TaxTemplatesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaxTemplatesList", reflect.TypeOf((*MockStore)(nil).TaxTemplatesList), arg0)
}

// UnitAmenitiesCreateUpdate mocks base method.
func (m *MockStore) UnitAmenitiesCreateUpdate(arg0 context.Context, arg1 db.UnitAmenitiesCreateUpdateParams) ([]db.PropertiesSchemaUnitAmenity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitAmenitiesCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].([]db.PropertiesSchemaUnitAmenity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitAmenitiesCreateUpdate indicates an expected call of UnitAmenitiesCreateUpdate.
func (mr *MockStoreMockRecorder) UnitAmenitiesCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitAmenitiesCreateUpdate", reflect.TypeOf((*MockStore)(nil).UnitAmenitiesCreateUpdate), arg0, arg1)
}

// UserCreateUpdate mocks base method.
func (m *MockStore) UserCreateUpdate(arg0 context.Context, arg1 db.UserCreateUpdateParams) (db.AccountsSchemaUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreateUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreateUpdate indicates an expected call of UserCreateUpdate.
func (mr *MockStoreMockRecorder) UserCreateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreateUpdate", reflect.TypeOf((*MockStore)(nil).UserCreateUpdate), arg0, arg1)
}

// UserDeleteRestore mocks base method.
func (m *MockStore) UserDeleteRestore(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteRestore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserDeleteRestore indicates an expected call of UserDeleteRestore.
func (mr *MockStoreMockRecorder) UserDeleteRestore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteRestore", reflect.TypeOf((*MockStore)(nil).UserDeleteRestore), arg0, arg1)
}

// UserFind mocks base method.
func (m *MockStore) UserFind(arg0 context.Context, arg1 db.UserFindParams) (db.AccountsSchemaUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFind", arg0, arg1)
	ret0, _ := ret[0].(db.AccountsSchemaUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFind indicates an expected call of UserFind.
func (mr *MockStoreMockRecorder) UserFind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFind", reflect.TypeOf((*MockStore)(nil).UserFind), arg0, arg1)
}

// UserFindForUpdate mocks base method.
func (m *MockStore) UserFindForUpdate(arg0 context.Context, arg1 int32) (db.UserFindForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFindForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.UserFindForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFindForUpdate indicates an expected call of UserFindForUpdate.
func (mr *MockStoreMockRecorder) UserFindForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFindForUpdate", reflect.TypeOf((*MockStore)(nil).UserFindForUpdate), arg0, arg1)
}

// UserFindNavigationBars mocks base method.
func (m *MockStore) UserFindNavigationBars(arg0 context.Context, arg1 int32) ([]db.UserFindNavigationBarsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFindNavigationBars", arg0, arg1)
	ret0, _ := ret[0].([]db.UserFindNavigationBarsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFindNavigationBars indicates an expected call of UserFindNavigationBars.
func (mr *MockStoreMockRecorder) UserFindNavigationBars(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFindNavigationBars", reflect.TypeOf((*MockStore)(nil).UserFindNavigationBars), arg0, arg1)
}

// UserPermissionsList mocks base method.
func (m *MockStore) UserPermissionsList(arg0 context.Context, arg1 int32) ([]db.UserPermissionsListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserPermissionsList", arg0, arg1)
	ret0, _ := ret[0].([]db.UserPermissionsListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPermissionsList indicates an expected call of UserPermissionsList.
func (mr *MockStoreMockRecorder) UserPermissionsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPermissionsList", reflect.TypeOf((*MockStore)(nil).UserPermissionsList), arg0, arg1)
}

// UserResetPassword mocks base method.
func (m *MockStore) UserResetPassword(arg0 context.Context, arg1 db.UserResetPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserResetPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserResetPassword indicates an expected call of UserResetPassword.
func (mr *MockStoreMockRecorder) UserResetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserResetPassword", reflect.TypeOf((*MockStore)(nil).UserResetPassword), arg0, arg1)
}

// UserRolesList mocks base method.
func (m *MockStore) UserRolesList(arg0 context.Context, arg1 int32) ([]db.UserRolesListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRolesList", arg0, arg1)
	ret0, _ := ret[0].([]db.UserRolesListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRolesList indicates an expected call of UserRolesList.
func (mr *MockStoreMockRecorder) UserRolesList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRolesList", reflect.TypeOf((*MockStore)(nil).UserRolesList), arg0, arg1)
}

// UsersList mocks base method.
func (m *MockStore) UsersList(arg0 context.Context) ([]db.UsersListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersList", arg0)
	ret0, _ := ret[0].([]db.UsersListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersList indicates an expected call of UsersList.
func (mr *MockStoreMockRecorder) UsersList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersList", reflect.TypeOf((*MockStore)(nil).UsersList), arg0)
}
